<?php

namespace app\models\work;

use app\models\common\AsAdmin;
use app\models\common\Company;
use app\models\common\DocumentIn;
use app\models\common\DocumentOut;
use Yii;
use yii\bootstrap\Html;


class CompanyWork extends Company
{
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'company_type_id' => 'Company Type ID',
            'name' => 'Name',
            'short_name' => 'Short Name',
            'is_contractor' => 'Является контрагентом',
            'inn' => 'Inn',
            'category_smsp_id' => 'Category Smsp ID',
            'comment' => 'Комментарий',
            'phone_number' => 'Номер телефона',
            'email' => 'E-mail',
            'site' => 'Сайт (при наличии)',
            'okved' => 'Код по ОКВЭД',
            'head_fio' => 'ФИО руководителя',
            'ownershipTypeString' => 'Форма собственности',
            'contractorString' => 'Является контрагентом',
            'editString' => 'Последний редактор карточки',
        ];
    }

    public function getCategorySmspString()
    {
        if ($this->category_smsp_id !== null)
        {
            $model = CategorySmspWork::find()->where(['id' => $this->category_smsp_id])->one();
            return $model->name;
        }
        else
            return 'НЕ СМСП';
    }

    public function getOwnershipTypeString()
    {
        return OwnershipTypeWork::find()->where(['id' => $this->ownership_type_id])->one()->name;
    }

    public function getContractorString()
    {
        return $this->is_contractor == 1 ? 'Да' : 'Нет';
    }

    public function checkForeignKeys()
    {
        $doc_out = DocumentOut::find()->where(['company_id' => $this->id])->all();
        $doc_in = DocumentIn::find()->where(['company_id' => $this->id])->all();
        $contract = ContractWork::find()->where(['contractor_id' => $this->id])->all();
        $as = AsAdmin::find()->where(['as_company_id' => $this->id])->all();
        if (count($doc_out) > 0 || count($doc_in) > 0 || count($as) > 0 || count($contract) > 0)
        {

            Yii::$app->session->addFlash('error', 'Невозможно удалить организацию! Организация используется в документах');
            return false;
        }
        return true;
    }

    public function getEditString()
    {
        $user = UserWork::find()->where(['id' => $this->last_edit_id])->one();
        return $user->fullName;
    }

    public function getContractArray()
    {
        $contracts = ContractWork::find()->where(['contractor_id' => $this->id])->all();
        $res = '';
        foreach ($contracts as $contract)
            $res .= Html::a('Договор №'.$contract->number, \yii\helpers\Url::to(['contract/view', 'id' => $contract->id])).'<br>';

        return $res;
    }

    public function beforeSave($insert)
    {
        $this->last_edit_id = Yii::$app->user->identity->getId();

        $duplicate = CompanyWork::find()->where(['inn' => $this->inn])->one();
        if ($duplicate !== null && $duplicate->id !== $this->id)
        {
            Yii::$app->session->setFlash('danger', 'Невозможно добавить компанию, т.к. в системе существует компания с таким же ИНН!');
            return 0;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
