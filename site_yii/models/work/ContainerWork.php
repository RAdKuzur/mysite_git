<?php

namespace app\models\work;

use app\models\common\Container;
use app\models\work\ContainerObjectWork;
use app\models\null\AuditoriumNull;
use app\models\null\MaterialObjectNull;
use yii\helpers\Html;
use Yii;


class ContainerWork extends Container
{
	public $objects; //объекты для динамической формы

	public function rules()
    {
        return [
            [['name'], 'required'],
            [['container_id', 'material_object_id', 'auditorium_id'], 'integer'],
            [['name'], 'string', 'max' => 1000],
            [['container_id'], 'exist', 'skipOnError' => true, 'targetClass' => ContainerWork::className(), 'targetAttribute' => ['container_id' => 'id']],
            [['auditorium_id'], 'exist', 'skipOnError' => true, 'targetClass' => AuditoriumWork::className(), 'targetAttribute' => ['auditorium_id' => 'id']],
            [['material_object_id'], 'exist', 'skipOnError' => true, 'targetClass' => MaterialObjectWork::className(), 'targetAttribute' => ['material_object_id' => 'id']],
        ];
    }

	public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Наименование контейнера',
            'container_id' => 'Входит в контейнер (опционально)',
            'containerLink' => 'Входит в контейнер',
            'material_object_id' => 'Является объектом (опционально)',
            'objectLink' => 'Является объектом',
            'auditorium_id' => 'Является помещением (опционально)',
            'auditoriumLink' => 'Является помещением',
            'objectsInContainer' => 'Объекты в контейнере',
            'containersInContainer' => 'Включает контейнеры',
        ];
    }

    public function getContainerWork()
    {
        $try = $this->hasOne(ContainerWork::className(), ['id' => 'container_id']);
        return ;
    }

    public function getAuditoriumWork()
    {
        $try = $this->hasOne(AuditoriumWork::className(), ['id' => 'auditorium_id']);
        return $try->all() ? $try : new AuditoriumNull();
    }

    public function getMaterialObjectWork()
    {
        $try = $this->hasOne(MaterialObjectWork::className(), ['id' => 'material_object_id']);
        return $try->all() ? $try : new MaterialObjectNull();
    }



    public function getContainerLink()
    {
    	return Html::a($this->containerWork->name, \yii\helpers\Url::to(['container/view', 'id' => $this->container_id]));
    }

    public function getObjectLink()
    {
    	return Html::a($this->materialObjectWork->name, \yii\helpers\Url::to(['material-object/view', 'id' => $this->material_object_id]));
    }

    public function getAuditoriumLink()
    {
    	return Html::a($this->auditoriumWork->name, \yii\helpers\Url::to(['auditorium/view', 'id' => $this->auditorium_id]));
    }


    public function getObjectsInContainer()
    {
    	$result = '';
    	$objects = ContainerObjectWork::find()->where(['container_id' => $this->id])->all();
    	foreach ($objects as $object)
    	{
    		$obj = MaterialObjectWork::find()->where(['id' => $object->id])->one();
    		$result .= Html::a($object->materialObjectWork->NameAndNumberMaterialObject, \yii\helpers\Url::to(['material-object/view', 'id' => $object->material_object_id])).'<br>';
    	}
    	return $result;
    }

    public function getContainersInContainer()
    {
        $result = '';
        $containers = ContainerWork::find()->where(['container_id' => $this->id])->all();
        foreach ($containers as $one)
        {
            $result .= Html::a($one->name, \yii\helpers\Url::to(['container/view', 'id' => $one->id])).'<br>';
        }
        return $result;
    }

    public function getErrorsWork()
    {
        $errorsList = ContainerErrorsWork::find()->where(['container_id' => $this->id, 'time_the_end' => NULL, 'amnesty' => NULL])->all();
        $result = '';
        foreach ($errorsList as $errors)
        {
            $errorName = ErrorsWork::find()->where(['id' => $errors->errors_id])->one();
            if ($errors->getCritical() == 1)
                $result .= 'Внимание, КРИТИЧЕСКАЯ ошибка: ' . $errorName->number . ' ' . $errorName->name . '<br>';
            else $result .= 'Внимание, ошибка: ' . $errorName->number . ' ' . $errorName->name . '<br>';
        }
        return $result;
    }

    public function afterSave($insert, $changedAttributes)
    {
    	parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    	if ($this->objects !== null && $this->objects[0]->material_object_id !== '')
        {
            foreach ($this->objects as $object)
            {
                $newObject = new ContainerObjectWork();
                $newObject->container_id = $this->id;
                $newObject->material_object_id = $object->material_object_id;
                $newObject->save();

                $errorsObj = new MaterialObjectErrorsWork();
                $errorsObj->CheckContainerMaterialObject($object->material_object_id);
            }
        }

        // тут должны работать проверки на ошибки
        $errorsCheck = new ContainerErrorsWork();
        $errorsCheck->CheckErrorsContainerWithoutAmnesty($this->id);
    }

    public function beforeDelete()
    {
        $co = ContainerObjectWork::find()->where(['container_id' => $this->id])->all();
        if (count($co) > 0)
        {
            Yii::$app->session->setFlash('danger', 'Невозможно удалить контейнер, т.к. в нем находятся материальные ценности!');
            return;
        }

        $errors = ContainerErrorsWork::find()->where(['container_id' => $this->id])->all();
        foreach ($errors as $error) $error->delete();

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
