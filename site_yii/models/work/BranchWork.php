<?php

namespace app\models\work;

use app\models\work\AuditoriumWork;
use app\models\common\Branch;
use app\models\work\PeopleWork;
use Yii;
use yii\helpers\Html;


class BranchWork extends Branch
{
    const QUANT = 1;
    const TECHNO = 2;
    const CDNTT = 3;
    const MOB_QUANT = 4;

    const ADMIN = 5;
    const COD = 7;
    const PLANET = 8;

    const ALL = [1, 2, 3, 4, 5, 7, 8];

    public $auditoriums;

    public function rules()
    {
        return [
            [['name'], 'required'],
            [['name'], 'string', 'max' => 1000],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название отдела',
            'auditoriumsList' => 'Список помещений',
            'workerList' => 'Список сотрудников',
            'nomenclatureList' => 'Номенклатура дел',
        ];
    }

    public function getAuditoriumsList()
    {
        $auds = AuditoriumWork::find()->where(['branch_id' => $this->id])->all();
        $result = '';
        foreach ($auds as $aud)
        {
            $result .= Html::a($aud->name.' ('.$aud->text.')', \yii\helpers\Url::to(['auditorium/view', 'id' => $aud->id])).'<br>';
        }
        return $result;
    }

    public function getWorkerList()
    {
        $workers = PeopleWork::find()->where(['branch_id' => $this->id])->all();
        $result = '';
        foreach ($workers as $worker)
        {
            $result .= Html::a($worker->getFullNameBranch($this->id), \yii\helpers\Url::to(['people/view', 'id' => $worker->id])).'<br>';
        }
        return $result;
    }

    public function getNomenclatureList()
    {
        $nomenclatures = NomenclatureWork::find()->where(['branch_id' => $this->id])->all();
        $result = '';
        foreach ($nomenclatures as $nomenclature)
        {
            $result .= $nomenclature->getFullNameWork($this->id).'<br>';
        }
        return $result;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($this->auditoriums !== null && $this->auditoriums[0]->name !== '')
        {
            foreach ($this->auditoriums as $auditorium)
            {
                $newAuds = new AuditoriumWork();
                $newAuds->branch_id = $this->id;
                $newAuds->name = $auditorium->name;
                $newAuds->square = $auditorium->square;
                $newAuds->is_education = $auditorium->is_education;
                $newAuds->save(false);
            }
        }
    }

    public function beforeDelete()
    {
        $auds = AuditoriumWork::find()->where(['branch_id' => $this->id])->all();
        foreach ($auds as $aud) $aud->delete();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
