<?php

namespace app\models\work;

use app\models\common\CertificatTemplates;
use app\models\components\FileWizard;


use Yii;

const _MAX_FILE_SIZE = 26214400;

class CertificatTemplatesWork extends CertificatTemplates
{
    public $templateFile;

    public function rules()
    {
        return [
            [['name', 'path'], 'required'],
            [['name', 'path'], 'string', 'max' => 1000],
            [['templateFile'], 'file', 'extensions' => 'jpg, png, pdf, jpeg', 'skipOnEmpty' => true],
        ];
    }


    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Наименование шаблона',
            'path' => 'Файл шаблона',
            'templateFile' => 'Подложка (изображение) шаблона'
        ];
    }

    public function beforeDelete()
    {
        $certificats = CertificatWork::find()->where(['certificat_template_id' => $this->id])->all();

        if (count($certificats) > 0)
        {
            Yii::$app->session->setFlash('danger', 'Невозможно удалить шаблон, т.к. имеются связанные с нем сертификаты!');
            return;
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        $allName = CertificatTemplatesWork::find()->where(['name' => $this->name])->all();
        if (count($allName) > 0)
        {
            Yii::$app->session->setFlash('danger', 'Невозможно добавить неуникальный шаблон');
            return;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
       parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function uploadTemplateFile()
    {
        $path = '@app/upload/files/certificat-templates/';
        $filename = 'Шаблон "'.$this->name.'"';
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^а-яА-Я0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->path = $res . '.' . $this->templateFile->extension;
        $this->templateFile->saveAs( $path . $res . '.' . $this->templateFile->extension);
    }
}
