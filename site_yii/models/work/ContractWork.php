<?php

namespace app\models\work;

use app\models\common\Company;
use app\models\common\Contract;
use app\models\null\ContractCategoryContractNull;
use Yii;
use yii\helpers\Html;
use app\models\components\FileWizard;


class ContractWork extends Contract
{
    public $scanFile;
    public $category;

    public function rules()
    {
        return [
            [['date', 'number'], 'required'],
            [['date', 'category'], 'safe'],
            [['contractor_id'], 'integer'],
            [['number'], 'string', 'max' => 100],
            [['file', 'key_words'], 'string', 'max' => 1000],
            [['contractor_id'], 'exist', 'skipOnError' => true, 'targetClass' => Company::className(), 'targetAttribute' => ['contractor_id' => 'id']],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'date' => 'Дата договора',
            'number' => 'Номер договора',
            'file' => 'Скан договора',
            'key_words' => 'Ключевые слова',
            'categoryString' => 'Категории мат. объектов в договоре',
            'invoices' => 'Документы',
            'contractorLink' => 'Контрагент',
        ];
    }

    public function getContractFullName()
    {
        return 'Договор №'.$this->number.' от '.$this->date;
    }

    public function getContractorLink()
    {
        $company = CompanyWork::find()->where(['id' => $this->contractor_id])->one();
        return Html::a($company->name, \yii\helpers\Url::to(['company/view', 'id' => $company->id]));
    }

    public function getContractCategoryContractsWork()
    {
        $try = $this->hasMany(ContractCategoryContractWork::className(), ['contract_id' => 'id']);
        return $try->all() ? $try : [new ContractCategoryContractNull];
    }

    public function getCategoriesString()
    {
        $result = '';
        $categories = ContractCategoryContractWork::find()->where(['contract_id' => $this->id])->all();

        if ($categories !== null)
            foreach ($categories as $category)
                $result .= $category->categoryContractWork->name.'<br>';

        return $result;
    }

    public function getFileLink()
    {
        return Html::a($this->file, \yii\helpers\Url::to(['contract/get-file', 'fileName' => $this->file, 'modelId' => $this->id, 'type' => null]));
    }

    public function uploadFile()
    {
        $path = '@app/upload/files/contract/';
        $filename = '';
        $filename = 'Договор_'.$this->number.'_'.$this->date.'_'.$this->id;
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^а-яА-Я0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->file = $res.'.'.$this->scanFile->extension;
        $this->scanFile->saveAs( $path.$res.'.'.$this->scanFile->extension);
    }

    public function getCategoryString()
    {
        $cat = ContractCategoryContractWork::find()->where(['contract_id' => $this->id])->all();
        $res = '';
        foreach ($cat as $one)
        {
            $res .= $one->categoryContract->name.'<br>';
        }
        return $res;
    }

    public function getErrorsWork()
    {
        $errorsList = ContractErrorsWork::find()->where(['contract_id' => $this->id, 'time_the_end' => NULL, 'amnesty' => NULL])->all();
        $result = '';
        foreach ($errorsList as $errors)
        {
            $errorName = ErrorsWork::find()->where(['id' => $errors->errors_id])->one();
            if ($errors->getCritical() == 1)
                $result .= 'Внимание, КРИТИЧЕСКАЯ ошибка: ' . $errorName->number . ' ' . $errorName->name . '<br>';
            else $result .= 'Внимание, ошибка: ' . $errorName->number . ' ' . $errorName->name . '<br>';
        }
        return $result;
    }

    public function beforeSave($insert)
    {
        $duplicate = ContractWork::find()->where(['date' => $this->date])->andWhere(['number' => $this->number])->andWhere(['!=', 'id', $this->id])->one();
        if ($insert) $duplicate = ContractWork::find()->where(['date' => $this->date])->andWhere(['number' => $this->number])->one();
        if ($duplicate !== null)
        {
            Yii::$app->session->setFlash('danger', 'Невозможно сохранить договор, т.к. в системе существует договор с таким же номером и датой');
            return false;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if ($this->category !== null && $this->category !== "") {
            foreach ($this->category as $cat_one) {
                $ccc = ContractCategoryContractWork::find()->where(['contract_id' => $this->id])->andWhere(['category_contract_id' => $cat_one])->one();
                if ($ccc == null) $ccc = new ContractCategoryContractWork();
                $ccc->contract_id = $this->id;
                $ccc->category_contract_id = $cat_one;
                $ccc->save();
            }
        }

        // тут должны работать проверки на ошибки
        $errorsCheck = new ContractErrorsWork();
        $errorsCheck->CheckErrorsContractWithoutAmnesty($this->id);
    }

    public function getInvoices()
    {
        $invoices = InvoiceWork::find()->where(['contract_id' => $this->id])->orderBy(['date_invoice' => 'SORT_ASC'])->all();
        $result = '';
        $i = 1;
        foreach ($invoices as $invoice)
        {
            $result .= $i.'. '.$invoice->numberString . '<br>';
        }
        return $result;
    }

    public function beforeDelete()
    {
        $invoice = InvoiceWork::find()->where(['contract_id' => $this->id])->all();
        if (count($invoice) > 0)
        {
            Yii::$app->session->setFlash('danger', 'Невозможно удалить договор, т.к. с ним есть связанные документы о поступлении материальных ценностей!');
            return;
        }

        $errors = ContractErrorsWork::find()->where(['contract_id' => $this->id])->all();
        foreach ($errors as $error) $error->delete();

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
