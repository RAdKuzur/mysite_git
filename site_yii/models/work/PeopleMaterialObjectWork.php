<?php

namespace app\models\work;

use app\models\common\PeopleMaterialObject;
use app\models\null\PeopleNull;
use app\models\work\PeopleWork;
use Mpdf\Tag\P;
use Yii;
use yii\helpers\Html;

/**
 */
class PeopleMaterialObjectWork extends PeopleMaterialObject
{
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['people_id', 'material_object_id'], 'required'],
            [['people_id', 'material_object_id'], 'integer'],
            [['acceptance_date'], 'string'],
            [['material_object_id'], 'exist', 'skipOnError' => true, 'targetClass' => MaterialObject::className(), 'targetAttribute' => ['material_object_id' => 'id']],
            [['people_id'], 'exist', 'skipOnError' => true, 'targetClass' => People::className(), 'targetAttribute' => ['people_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'people_id' => 'Ответственный',
            'peopleName' => 'Ответственный',
            'material_object_id' => 'Объект',
            'materialObjectName' => 'Объект',
            'acceptance_date' => 'Дата',
            'history' => 'История',
        ];
    }

    public function getPeopleName()
    {
        $people = PeopleWork::find()->where(['id' => $this->people_id])->one();
        return Html::a($people->fullName, \yii\helpers\Url::to(['people/view', 'id' => $people->id]));
    }

    public function getMaterialObjectName()
    {
        $obj = MaterialObjectWork::find()->where(['id' => $this->material_object_id])->one();
        return Html::a($obj->name, \yii\helpers\Url::to(['material-object/view', 'id' => $obj->id]));
    }

    public function getHistory()
    {
        $history = LegacyMaterialResponsibilityWork::find()->where(['material_object_id' => $this->material_object_id])->orderBy(['date' => SORT_ASC])->all();
        foreach ($history as $historyOne)
        {
            $result .= Html::a($historyOne->peopleOutWork->shortName, \yii\helpers\Url::to(['people/view', 'id' => $historyOne->people_out_id])).' &#10148; '.Html::a($historyOne->peopleInWork->shortName, \yii\helpers\Url::to(['people/view', 'id' => $historyOne->people_in_id])).' '.$historyOne->date.'<br>';
        }
        return $result;
    }

    public function getPeopleWork()
    {
        $try = $this->hasOne(PeopleWork::className(), ['id' => 'people_id']);
        return $try->all() ? $try : new PeopleNull();
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($changedAttributes["people_id"] != $this->people_id)
        {
            /*
             * Здесь генерация документа о передаче ответственности
             * От человека $changedAttributes["people_id"]
             * К человеку $this->people_id
             */

            $legacy = new LegacyMaterialResponsibilityWork();
            $legacy->people_out_id = $changedAttributes["people_id"];
            $legacy->people_in_id = $this->people_id;
            $legacy->material_object_id = $this->material_object_id;
            $legacy->date = $this->acceptance_date;
            $legacy->save();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
