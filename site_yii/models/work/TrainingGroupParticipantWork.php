<?php

namespace app\models\work;

use app\models\common\ForeignEventParticipants;
use app\models\common\GroupProjectThemes;
use app\models\common\PersonalData;
use app\models\null\ForeignEventParticipantsNull;
use app\models\null\GroupProjectThemesNull;
use app\models\null\TrainingGroupNull;
use app\models\null\CertificatNull;
use app\models\work\PersonalDataForeignEventParticipantWork;
use app\models\common\SendMethod;
use app\models\common\TrainingGroup;
use app\models\common\TrainingGroupParticipant;
use Yii;


class TrainingGroupParticipantWork extends TrainingGroupParticipant
{
    public $participant_name;
    public $pd = [];

    public function rules()
    {
        return [
            [['training_group_id'], 'required'],
            [['participant_id', 'send_method_id', 'training_group_id', 'status'], 'integer'],
            [['certificat_number', 'participant_name'], 'string'],
            [['pd'], 'safe'],
            [['participant_id'], 'exist', 'skipOnError' => true, 'targetClass' => ForeignEventParticipants::className(), 'targetAttribute' => ['participant_id' => 'id']],
            [['send_method_id'], 'exist', 'skipOnError' => true, 'targetClass' => SendMethod::className(), 'targetAttribute' => ['send_method_id' => 'id']],
            [['training_group_id'], 'exist', 'skipOnError' => true, 'targetClass' => TrainingGroup::className(), 'targetAttribute' => ['training_group_id' => 'id']],
            [['group_project_themes_id'], 'exist', 'skipOnError' => true, 'targetClass' => GroupProjectThemes::className(), 'targetAttribute' => ['group_project_themes_id' => 'id']],
        ];
    }


    public function getParticipantWork()
    {
        $try = $this->hasOne(ForeignEventParticipantsWork::className(), ['id' => 'participant_id']);
        return $try->all() ? $try : new ForeignEventParticipantsNull();
    }

    public function getTrainingGroupWork()
    {
        $try = $this->hasOne(TrainingGroupWork::className(), ['id' => 'training_group_id']);
        return $try->all() ? $try : new TrainingGroupNull();
    }

    public function getCertificatWork()
    {
        $try = $this->hasOne(CertificatWork::className(), ['training_group_participant_id' => 'id']);
        return $try->all() ? $try : new CertificatNull();
    }

    public function getGroupProjectThemesWork()
    {
        $try = $this->hasOne(GroupProjectThemesWork::className(), ['id' => 'group_project_themes_id']);
        return $try->all() ? $try : new GroupProjectThemesNull();
    }

    public function beforeDelete()
    {
        //var_dump(self::EVENT_BEFORE_DELETE);
        $visits = VisitWork::find()->joinWith(['trainingGroupLesson trainingGroupLesson'])->where(['foreign_event_participant_id' => $this->participant_id])->andWhere(['trainingGroupLesson.training_group_id' => $this->training_group_id])->all();

        foreach ($visits as $visit) {
            $visit->delete();
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function delete()
    {
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function addVisits($training_group_id, $participant_id)
    {
        $lessons = TrainingGroupLessonWork::find()->where(['training_group_id' => $training_group_id])->all();
        $lessonsId = [];
        foreach ($lessons as $lOne)
            $lessonsId[] = $lOne->id;

        foreach ($lessonsId as $lId) {
            $visit = VisitWork::find()->where(['foreign_event_participant_id' => $participant_id])->andWhere(['training_group_lesson_id' => $lId])->one();
            if ($visit === null) {
                $visit = new VisitWork();
                $visit->foreign_event_participant_id = $participant_id;
                $visit->training_group_lesson_id = $lId;
                $visit->status = 3;
                $visit->save(false);
            }
        }
    }

}
