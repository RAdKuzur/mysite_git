<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "personal_offset".
 *
 * @property int $id
 * @property string $name
 *
 * @property PartyPersonal[] $partyPersonals
 */
class PersonalOffset extends \yii\db\ActiveRecord
{
    public $personals;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'personal_offset';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['name'], 'string', 'max' => 1000],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'teamsList' => 'Список участников',
        ];
    }

    /**
     * Gets query for [[PartyPersonals]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPartyPersonals()
    {
        return $this->hasMany(PartyPersonal::className(), ['personal_offset_id' => 'id']);
    }

    public function getTeamsList()
    {
        $teams = PartyPersonal::find()->where(['personal_offset_id' => $this->id])->all();
        $result = "";
        foreach ($teams as $team)
            $result .= $team->secondname.' '.$team->secondname.' '.$team->patronymic.'<br>';
        return $result;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($this->personals !== null && $this->personals[0]->secondname !== "")
        {
            foreach ($this->personals as $personal)
            {
                $newPersonal = new PartyPersonal();
                $newPersonal->secondname = $personal->secondname;
                $newPersonal->firstname = $personal->firstname;
                $newPersonal->patronymic = $personal->patronymic;
                $newPersonal->personal_offset_id = $this->id;
                $newPersonal->total_score = 0;
                $newPersonal->save();
            }
        }
    }

    public function beforeDelete()
    {
        $pts = PartyPersonal::find()->where(['personal_offset_id' => $this->id])->all();
        foreach ($pts as $pt) $pt->delete();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
